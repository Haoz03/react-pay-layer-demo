{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onRef","ref","payLayer","state","layerVisibility","password","showLayer","bind","assertThisInitialized","handleClose","forgetClickEvent","inputEnd","setState","alert","_this2","timer","setTimeout","success","then","fail","clearTimeout","console","log","react_default","a","createElement","className","src","logo","alt","onClick","lib_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6SA6DeA,cAvDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA8BRQ,MAAQ,SAAAC,GACNR,EAAKS,SAAWD,GA9BhBR,EAAKU,MAAQ,CACXC,iBAAiB,EACjBC,SAAU,UAEZZ,EAAKa,UAAYb,EAAKa,UAAUC,KAAfb,OAAAc,EAAA,EAAAd,CAAAD,IACjBA,EAAKgB,YAAchB,EAAKgB,YAAYF,KAAjBb,OAAAc,EAAA,EAAAd,CAAAD,IACnBA,EAAKiB,iBAAmBjB,EAAKiB,iBAAiBH,KAAtBb,OAAAc,EAAA,EAAAd,CAAAD,IACxBA,EAAKkB,SAAWlB,EAAKkB,SAASJ,KAAdb,OAAAc,EAAA,EAAAd,CAAAD,IATCA,2EAYjBG,KAAKgB,SAAS,CAAER,iBAAiB,0CAGjCR,KAAKgB,SAAS,CAAER,iBAAiB,+CAGjCS,MAAM,+EAECR,GAAU,IAAAS,EAAAlB,KACbmB,EAAQC,WAAW,WACjBX,IAAaS,EAAKX,MAAME,SAC1BS,EAAKZ,SAASe,UAAUC,KAAK,cAE7BJ,EAAKZ,SAASiB,KAAK,wCAErBC,aAAaL,IACZ,MACHM,QAAQC,IAAIjB,oCAMZ,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,UAAQK,QAASlC,KAAKU,WAAtB,yCAEDV,KAAKO,MAAMC,iBACVmB,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACExB,MAAOJ,KAAKI,MACZS,YAAab,KAAKa,YAClBC,iBAAkBd,KAAKc,iBACvBC,SAAUf,KAAKe,mBAhDTqB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b2edfbe1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.less\";\nimport ReactPayLayer from \"react-pay-layer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layerVisibility: false,\n      password: \"123456\"\n    };\n    this.showLayer = this.showLayer.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.forgetClickEvent = this.forgetClickEvent.bind(this);\n    this.inputEnd = this.inputEnd.bind(this);\n  }\n  showLayer() {\n    this.setState({ layerVisibility: true });\n  }\n  handleClose() {\n    this.setState({ layerVisibility: false });\n  }\n  forgetClickEvent() {\n    alert(\"点击了忘记密码\");\n  }\n  inputEnd(password) {\n    let timer = setTimeout(() => {\n      if (password === this.state.password) {\n        this.payLayer.success().then(() => {});\n      } else {\n        this.payLayer.fail(\"支付密码错误\");\n      }\n      clearTimeout(timer);\n    }, 1500);\n    console.log(password);\n  }\n  onRef = ref => {\n    this.payLayer = ref;\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>正确密码为：123456</p>\n          <button onClick={this.showLayer}>显示支付弹窗</button>\n        </header>\n        {this.state.layerVisibility && (\n          <ReactPayLayer\n            onRef={this.onRef}\n            handleClose={this.handleClose}\n            forgetClickEvent={this.forgetClickEvent}\n            inputEnd={this.inputEnd}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}